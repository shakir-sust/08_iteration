---
title: "Iteration"
format: html
---

# Learning objectives  
Today's learning objectives are to:   

  - Understand the need for iteration and automation  
  - Explore three different approaches to iteration and automation:  
    - function writing  
    - loops  
    - list mapping  

# Introduction  
This exercise is adapted from the analysis performed in the paper **Santos, Bastos, et al. (2022). Identifying Nematode Damage on Soybean through Remote Sensing and Machine Learning Techniques**, https://www.mdpi.com/2073-4395/12/10/2404.

This study evaluated the potential to predict different **nematode counts** using **drone-based remote sensing metrics** in soybeans.  

A total of **43 georeferenced soil and plant samples** were collected from a field grown with **soybeans** and known to be previously infested with different nematode species.
![](../data/site.png)

Soil and soybeans root material from each sampling point were analyzed in a laboratory for different nematode species, including:  
  - Meloidogyne incognita (mel)  
  - Pratylenchus brachyurus (pb)  
  - Heterodera glycines (het)  
  
On the same day that the soil and plant samples were collected, a drone-mounted multispectral sensor was also flown over the field. 

Imagery data was extracted from each point where soil and plant samples were taken. Imagery data included reflectance in the bands of:  [5 bands] 
  - red (r),  
  - green (g),  
  - blue (b),  
  - near-infrared (nir),  [a lot of nir reflection indicates biomass]
  - red-edge (re)  

[Note: Healthy plants will reflect less of rgb, while reflect a lot of nir]    

# Tasks  
Our goal with this data is to:  
  - Calculate different vegetation indices using the bands  
  - For each of the nematode variables, run all possible combinations of bivariate regression models, with each band and vegetation index as the single explanatory variable.  
  
For example:  

  number of Meloidogyne incognita nematode in the roots ~ reflectance on the green band  
  
We have a total of:  
  - **response variable**: 10 nematode-related variables  
  - **explanatory variables**: 5 bands + 10 vegetation indices  
  - **total models**: 10 x 15 = 150 models

# 1) Setup  

Here is where we load the packages we will use.

```{r setup}
#| message: false
#| warning: false

#install.packages("nlraa")

# Loading packages
library(tidyverse) # for data wrangling and plotting
library(janitor) # clean column names
library(knitr) # for figure displaying
```

Reading data.  
```{r}
#| message: false

nematode <- read_csv("../data/nematode_rs.csv")

nematode
```
  
# 2) EDA  
```{r summary}
summary(nematode)
```

```{r density plot} 
nematode %>% #we need to reshape this dataset from wide to long for density plots
  pivot_longer(cols = mel_s:re) %>% #to create 'long' form from wide 'form' #we will have 43*16 = 688 columns that we pivoted into 'long' form
  arrange(name) %>% #to arrange by 'name' column
  ggplot(aes(x = value)) + #we feed the previous data right into "ggplot()"
  geom_density() +
  facet_wrap(~name, scales = "free") #scales = "free": this argument auto-adjust the scales (on x-axis and y-axis) depending on the plot  #we facet by "name" column

```

# 3) Function writing - ndvi 

The first step will be to calculate 10 different vegetation indices.  

Vegetation indices represent different ways of combining reflectance data from different bands. One of the main formats of vegetation indices is the **normalized difference vegetation index**, that takes the form of:  

$$ ndvi = \dfrac{(nir - vis)}{(nir + vis)}$$
where **nir** is reflectance from the near-infrared band, and **vis** is reflectance from any band from the visible region (blue, red, green, red-edge).  

One example of creating ndvi for the nir and red bands would be:  

```{r}
#Manual process
nematode %>%
  mutate(rndvi = (nir - r)/(nir + r)) #S%>% #rndvi = ndvi based on red band 
  #mutate(bndvi = (nir - b)/(nir + b)) %>% #bndvi = ndvi based on blue band 
  #mutate(gndvi = (nir - g)/(nir + g)) #gndvi = ndvi based on green band 
  
```

Since we're going to calculate this for each of the visible-region bands (5 in total), **let's write a function so we avoid some code repetition**.  

```{r ndvi function}
#function() is how r knows that ndvi is a function, and not an object
ndvi <- function(nir, vis) {
  (nir - vis)/ (nir + vis)
}

#func <- function(x, y) {(x - y)/ (x + y)}

```

The **function name** is `ndvi`. 
It takes 2 **arguments**:  
  - nir: a vector with data on the near-infrared reflectance  
  - vis: a vector with data on one of the visible bands reflectance

The function **returns** a vector with the result of the ndvi calculation using the specific nir and visibile band information provided.  

Let's see how that would compare to the previous step:  

```{r}
nematode %>%
  mutate(rndvi =ndvi(nir, r))

```

Now that we created a function to help with one type of vegetation index, let's go ahead and compute all 10 different ones.  

```{r}
nematode_w <- nematode %>%
  # Calculating ndvi-based indices
  mutate(rndvi = ndvi(nir, r),
         gndvi = ndvi(nir, g),
         bndvi = ndvi(nir, b),
         rendvi = ndvi(nir, re)
         ) %>%

  # Calculating other non-ndvi-based indices
  # For reference, see paper.
  mutate(sr = nir/r,
         rdvi = ((nir-r)/(nir+r))^2,
         savi = (((1+0.5)*(nir-r))/(nir+r+0.16)),
         vari = (g-r)/(g+r-b),
         evi = 2.5*(nir-r)/(nir+(6*r)-(7.5*b))+1,
         nli=  ((nir^2)-r)/((nir^2)+r))

nematode_w 
```

# 4) Function writing - CV (Coefficient of Variation)

Now, let's say we wanted to write a function to obtain some statistical summary metrics for each of the new variables we calculated.  

Let's write a function to return to us the mean and coefficient of variation. If you recall, there is no function for CV in R, so let's also create that.  

First, a function for CV.  

```{r}

#We will create a function to calculate the CV (coefficient of variation) because there is no default R function to calculate CV

meancv <- function(x) {
  # Calculate intermediary steps of mean and sd
  mean <- mean(x, na.rm = T) #"mean" on the left side of <- : intermediary object #mean(x (i.e., argument of the function), na.rm = T {i.e., to deal with NA missing values})
  sd <- sd(x, na.rm = T)
  # Calculate cv
  cv <- (sd/mean)*100
  # Combine them into a data frame
  df <- data.frame(mean = mean, #1st "mean" (on the left of = ): column name that we choose to assign #2nd "mean" (on the right of = ): the "mean" object {line 177} that the function is creating
                   cv = cv #1st "cv" (on the left of = ): column name that we choose to assign #2nd "cv" (on the right of = ): the "cv" object {line 180} that the function is creating
                   ) #because we want this function to return mean and cv as a data frame
  
  # Return the data frame
  df
}

meancv

#Difference between "meancv" and "meancv2" functions:
#"meancv2" is expecting a data frame and is expecting a certain column from that data frame
#"meancv" is expecting a vector (it is NOT expecting a data frame)

```

Let's apply it to one of the vegetation indices  

```{r}

meancv(nematode_w$rndvi)

```

# Important for Assignment 8 on Iteration

In the previous "meancv()" function, x inside the function(x) was basically giving a vector, and by calling "meancv(nematode_w$rndvi)", we were giving the "rndvi" vector to the function i.e., we were not giving a data frame itselt, we were giving a column of that data frame already in a vector/column format. A slight variation of this is the following code chunk.

Note: Keyboard shortcut to create a new code chunk: Ctrl + Alt + i (in Windows); Cmd + Opt + i (in mac)

```{r}

#If you have your arguments that specify the columns inside a data frame, you have to use double curly brackets {{ }} wrapped around that argument in the body of the function so that the function knows to translate the data frame ("df" translates into "nematode_w" data frame) and the column inside that data frame ("col" translates into "rndvi" column) for us.

meancv2 <- function(df, col) {
  # Calculate intermediary steps of mean and sd
  mean <- mean({{df}} %>% pull({{col}}), na.rm = T)
  sd <- sd({{df}} %>% pull({{col}}), na.rm = T)
  # Calculate cv
  cv <- (sd/mean)*100
  # Combine them into a data frame
  df <- data.frame(mean = mean,
                   cv = cv
                   )
  # Return the data frame
  df
}

meancv2

#Difference between "meancv" and "meancv2" functions:
#"meancv2" is expecting a data frame and is expecting a certain column from that data frame
#"meancv" is expecting a vector (it is NOT expecting a data frame)

```


```{r}

ggplot(data = nematode_w,
       aes(x = sampleid, y = mel_s)
       ) +
  geom_point()

```

```{r}

meancv2(df = nematode_w, #df = name of our data frame #remains same
        col = rndvi #Name of the column that we want to calculate #changes based on what we want to get #If we wanted to get the mean and CV of "sum_s" column, we would specify "sum_s" after "col = " argument
        )

#Difference between "meancv" and "meancv2" functions:
#"meancv2" is expecting a data frame and is expecting a certain column from that data frame
#"meancv" is expecting a vector (it is NOT expecting a data frame)

```


# 5) Loops  

Different types of loops exist, with `for` and `while` loops being the most popular.  

A `for` loop iterates through positions in a vector and apply the same task to each position, returning a result for each of them.  

Now, let's say I wanted to calculate the mean and CV for each of the response and explanatory variable columns in our data set.  

Since we will be performing the same task across many columns, we could create a loop where, for each column,   
  - we apply the function `meancv`, 
  - the function returns back the mean and CV,
  - the loop appends all the results together  
  
Loops are very useful when **repeating the same task across different scenarios**.  

In this case, the **task being repeated is to calculate mean and CV**, and the **different scenarios are the columns**.  

```{r}

nematode_w #Just printing so that we can look at the data frame itself

#After looking at the data frame, we decide that we do not need to include "site" and "sampleid" for further analysis i.e., we will only use/start with the 3rd column to all the way to the last (28th) column, and we will achieve this by using a loop

```

Let's create a for loop to do that for us.  
First, let's create an empty data frame (e.g., "nematode_meancv", in this case as mentioned in the following code chunk) scaffold to be populated by the results of the loop.  


```{r}

#Now, we will create an empty data frame that has 3 columns: variable, mean, cv so that we can store the values of mean and cv for each variable

nematode_meancv <- data.frame(variable = rep(NA, 26),
                              mean = rep(NA, 26),
                              cv = rep(NA, 26)
                              )

#"rep()" function is used to repeat values 
#rep(NA, 26): means we are going to repeat NA values 26 times (because we have 26 columns when we start with the 3rd column and continue all the way to the last (28th) column)

nematode_meancv

```

Each row above will be populated with the name of the variable, its mean and cv.  

```{r}

nematode_w


ncol(nematode_w) #"ncol()" function: calculates total number of columns in a data frame i.e., 'nematode_w' data frame

#One of the key components of a loop is an indexing letter, often denoted as i
#Key concept of using a loop: every loop has an index position i

for (i in 3:ncol(nematode_w)) { #i starting in 3, then going all the way to the total number of columns of "nematode_w" which is 28 #using index i allows us to iterate over different components of the data set
  # Getting the name of all columns
  colnames <- colnames(nematode_w) #"Colnames()" function: prints the list of columns in an object
  # Defining the name of the variable being analyzed in a given loop step
  varname <- colnames[i] #"varname" iterates over the column name(s) that we want to calculate the mean and cv for #varname: the name of the column that the loop is working at a particular iteration i #if we specify colnames[3], then its gonna print the name of the 3rd column variable which is "mel_s"
  # Calculating mean and cv
  statsum <- meancv(nematode_w[[i]]) #"statsum" returns a data frame that has both the mean and cv of that column that has been iterating over #We must specify double third brackets [[]] to use the column(s) inside "nematode_w" as a vector, because the way that we wrote the "meancv" function, it takes only vectors as inputs #if we use only a single third bracket [], it uses a data frame
  # Appending results to the empty data frame  
  nematode_meancv$variable[[i-2]] <- varname #"nematode_meancv$variable[[i-2]]" because we started from the 3rd row in "for (i in 3:ncol(nematode_w))" #If we used "for (i in 3:ncol(nematode_w))", then we would simply specify "nematode_meancv$variable[[i]]", we would not substract 2 from i in that case  #"nematode_meancv" is the empty canvas/data frame that we will use to store our results
  nematode_meancv$mean[[i-2]] <- round(statsum$mean, 3) #"round(statsum$mean, 3)": to round up to 3 decimal points 
  nematode_meancv$cv[[i-2]] <- round(statsum$cv, 3) #"round(statsum$cv, 3)": to round up to 3 decimal points 

  # Print a message
  print(paste("Finished with variable", varname))
  
}
```

Let's inspect `nematode_meancv`  
```{r}

nematode_meancv

```

# 6) List mapping  

Another way of doing iteration is through mapping a function to different components of a list.  (tidyverse way of doing iterative tasks, instead of using a loop)

We can do that with the package `purrr` and some of its functions:  
  - `map(x)` functions take one iterating element, x  
  - `map2(x, y)` functions take two iterating elements, x and y  
  - `pmap(x, y, ..., n)` functions take n iterating elements  

One way of working with these functions is with the combo `group_by() + nest()` to create the iterating data frames, followed by `mutate()` and `map()` to apply a given function to each iterating piece.  

Let's see that in practice.  

The goal of the next chunk is to run linear models of the type `y ~ x`, where y is one of the response variables (we have a total of 10) and x is one of the explanatory variables (we have a total of 15).  

In the end, we will have **150 models**, and I would like to keep only the one with the greatest R2 for each response variable.  

This approach creates a bit of a brain-twist, since we are creating data sets (and other object types) inside of the initial data set.  

*The following code chunk is the most important for this exercise.*


```{r}

nematode_mods <- nematode_w %>%
  # Pivotting longer for the response variables
  pivot_longer(cols = mel_s:eggs_r, #to specify only the response variable columns i.e., columns from "mel_s" to "eggs_r"
               names_to = "resp_var", #specifying how we want to name the new column variable #resp_var = response variables
               values_to = "resp_val" #specifying how we want to name the new column variable #resp_val = values of the response variable/response values
               ) %>%
  # Pivotting longer for the explanatory variables  
  pivot_longer(cols = b:nli, #to specify only the explanatory variable columns i.e., columns from "b" to "nli"
               names_to = "exp_var", #specifying how we want to name the new column variable #exp_var = explanatory variables
               values_to = "exp_val" #specifying how we want to name the new column variable #exp_val = values of the explanatory variable(s)
               ) %>%
  # Creating groups of resp_var and exp_var
  group_by(resp_var, exp_var) %>% #we want to group by 2 variables i.e., "resp_var" and "exp_var"
  nest() %>%
  # Applying linear model to each element
  #"map()" function does not go by itself in a pipe, it has to be associated with a "mutate()"
  mutate(lm = map(data, #the column (i.e., "data") in the tibble that we want to map i.e., iterate over
                  ~lm(data = .x, #"data = .x" is the syntax that we must use here # .x , not x
                      formula = resp_val ~ exp_val #y ~ x: y explained by x # "resp_val ~ exp_val" because "resp_val" and "exp_val" columns contain the numeric values of the reponse and explanatory variables, respectively.
                      )
                  )) %>%
  # Extracting R2 for each element  
  mutate(r2 = map(lm, #the column (i.e., "lm") that we want to map i.e., iterate over
                  ~summary(.x)$r.squared #"summary(.x)" because the map() function has only 1 iterating element which we refer to as ".x"
                  ))

nematode_mods

#nematode_mods$r2[1]


#nematode_mods$data[2] %>%
  #arrange(resp_var, exp_var)

```
Above we used the `map()` function because we only had one iterating element (i.e., data).  

Now, let's unnest the r2 values, then only keep the largest r2 for each response variable, and make some plots.  

```{r}

#We want to keep just 1 model for each one of these 10 nematode variables, which is the model that has the highest R2 for that specific response variable. So, I did all of these 150 models and I want to screen what was the best model in terms of R2 for the regression

nematode_mods_sel <- nematode_mods %>%
  unnest(r2) %>% #to bring r2 out of the cell and bring outside to put in the main data set level #Anytime you have a nested column that you want to bring out to the main level of the data frame, you do an "unnest()" 
  arrange(r2) %>%
  group_by(resp_var) %>%
  filter(r2 == max(r2))


nematode_mods_sel
```


```{r}

nematode_mods_sel_plots <- nematode_mods_sel %>%
  # Making scatterplots with r2 in subtitle
  mutate(splot = map2(data, r2, #When we have a nested structure, we have to use the map() function, which has to accompanied by a mutate() #"splot" stands for scatter plot (column name)
                     ~ggplot(data = .x,
                             aes(x =  exp_val,
                                 y = resp_val)
                             ) +
                       geom_point() +
                       geom_smooth(method = "lm") + #We must specify (method = "lm") inside the geom_smooth()
                       labs(subtitle = paste("R2:", .y))
                     )) %>%
  # Making scatterplots with r2 in subtitle, and correct x and y axis titles 
  #Now we are iterating over 4 iterating elements: data, r2, resp_var, exp_var
  #So, we will use the "pmap()" function, which allows us to bring in any number of iterating elements
  mutate(splot_better = pmap(list(.df = data,
                                  .r2 = r2,
                                  .rv = resp_var,
                                  .ev = exp_var
                                  ),
                             function(.df, .r2, .rv, .ev)
                               ggplot(data = .df,
                             aes(x =  exp_val,
                                 y = resp_val)
                             ) +
                       geom_point() +
                       geom_smooth(method = "lm") +
                       labs(subtitle = paste("R2:", .r2),
                            x = .ev,
                            y= .rv
                            )
                             ))

#On a map() function, we have only 1 iterating element which is .x  
#On a map2() function, we have 2 iterating elements where the 1st one is called .x, and the 2nd one is called .y. That is just the way map2() function works, just the syntax  


```
Now, we had 2 iterating elements to create `splot`, so we needed to use `map2()`.  

Also, with more than 2 iterating elements to create `splot_better`, we used the function `pmap()` which accepts as many elements as needed.

Let's print the first plot:
```{r}
nematode_mods_sel_plots$splot_better[1]
```

Now, let's print all of the plots  
```{r}
#| warning: false
#| message: false

nematode_mods_sel_plots$splot_better



```

Finally, let's save all these plots as one figure.  
```{r}
library(gridExtra)

allplots <- marrangeGrob(nematode_mods_sel_plots$splot_better,
                         nrow = 4,
                         ncol = 4
                         )

allplots

ggsave(plot = allplots, 
       "../output/allplots.png"
       )


```


# 7) Summary  
In this exercise, we:  
  - created two functions to simplify creating ndvi and cv  
  - iterated through the calculation of mean and cv using a `for` loop  
  - iterated through 150 sets of data to create 150 models using `map`  
  - selected best models, plotted (using `map2()` and `pmap()`), and exported to file  

  


